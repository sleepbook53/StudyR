latte = c(61, 70, 59, 71, 71, 92, 88),
price = c(2.0, 2.5, 3.0),
menu = c('espresso', 'americno', 'latte'))
cafe
cafe
str(cafe)
#cafe[[5]] 이런식으로 작업해도 됨
cafe = list(espresso, americano, latte, price, menu)
#인덱스열과 네임즈행 구분 잘 해야함
cafe
str(cafe)
#cafe[[5]] 이런식으로 작업해도 됨
cafe = list(espresso, americano, latte, price, menu)
str(cafe)
cafe$menu=factor(cafe$menu)
str(cafe)
cafe$price
names(cafe$price)= =cafe$menu
cafe$price
cafe
str(cafe)
cafe$menu=factor(cafe$menu)
str(cafe)
cafe$price
names(cafe$price)= =cafe$menu
cafe$price
names(cafe$price)=cafe$menu
cafe$price
names(cafe$price)
cafe$price
str(cafe)
cafe$price
cafe$price
cafe$price
names(cafe$price)=cafe$menu
cafe
cafe
cafe
cafe
cafe
str(cafe)
cafe$menu=factor(cafe$menu)
str(cafe)
cafe$price
str(cafe)
cafe$price
names(cafe$price)=cafe$menu
cafe$price
names(cafe$price)
str(cafe)
str(cafe$price)
cafe$price[1]
q()
say('hello by='cat')
say('hello' by='cat')
say('Hello World', by='cat')
say('Hello World!' , by = 'cat')
say('Hello World!' , by = 'cat')
say('Hello World!' , by = 'cat')
say('Hello World!' , by = 'cat')
say('Hello World!' , by = 'cat')
say('Hello World!' , by = 'cat')
install.packages('cowsay')
library(cowsay)
say('Hello World!' , by = 'cat')
say('Hello gyungbae!' , by = 'cat')
byNameList=c('cat', 'ghost', 'ant')
for (byname in by NameList) {
say('drink'. by=byName)
}
byNameList=c('cat', 'ghost', 'ant')
for (byName in by NameList) {
say('drink'. by=byName)
}
byNameList=c('cat', 'ghost', 'ant')
for (byName in by NameList) {
say('drink', by=byName)
}
byNameList=c('cat', 'ghost', 'ant')
for (byName in by NameList){
say('drink', by=byName)
}
byNameList=c('cat', 'ghost', 'ant')
for (byName in byNameList){
say('drink', by=byName)
}
install.packages('reshape2')
library(reshape2)
#head(tips)
table(tips[,3]) #성별의 빈도수, 전체데이터에서 발생횟수
for (tips in c(3,5,6){
print(tips)
}
for (i in 3:7){
print(table(tops[.1]))
for (i in 3:7){
print(table(tops[.1])
}
for (i in 3:7){
print(table(tips[.1]))
}
for (i in c(3:7)){
print(table(tips[.1]))
}
tip
tips
print(table(tips[.1]))
for (i in c(3:7)){
print(table(tips[,i]))
}
print(paste('---',names(tips)[i],'---'))
for (i in c(3:7)){
print(paste('---',names(tips)[i],'---'))
print(table(tips[,i]))
}
din=subset(tips, time == 'Dinner')
lunch=subset(tips, time == 'Lunch')
table(tips$time)
lun=subset(tips, time == 'Lunch')
table(din#day)
table(lun$day)
lun=subset(tips, time == 'Lunch')
lun=subset(tips, time == 'Lunch')
table(lun$day)
table(din#day)
table(din$day)
table(din$day)
table(lun$day)
table(tip$dinner)
table(tip$Dinner)
head(din)
colMeans(dinner[c('total_bill', 'tip', 'size'])
colMeans(lunch[c('total_bill', 'tip', 'size'])
colMeans(Dinner[c('total_bill', 'tip', 'size'])
colMeans(Lunch[c('total_bill', 'tip', 'size'])
colMeans(Dinner[c('total_bill', 'tip', 'size')])
colMeans(lunch[c('total_bill', 'tip', 'size')])
colMeans(lunch[c('total_bill', 'tip', 'size')])
colMeans(Dinner[c('total_bill', 'tip', 'size')])
colMeans(dinner[c('total_bill', 'tip', 'size')])
colMeans(din[c('total_bill', 'tip', 'size')])
colMeans(lun[c('total_bill', 'tip', 'size')])
colSums(din[c('total_bill', 'tip', 'size')])
colSums(lun[c('total_bill', 'tip', 'size')])
plot(din$tip)
plot(din$tip)
plot(lun$tip)
plot(din$tip)
plot(lun$tip)
plot(din$tip)
plot(lun$tip)
par(mfrow=c(2,1))
plot(din$tip)
par(mfrow=c(2,1))
plot(din$tip)
plot(lun$tip)
par(mfrow=c(2,1))
plot(din$tip)
plot(lun$tip)
par(mfrow=c(2,1))
plot(din$tip)
plot(lun$tip)
par(mfrow=c(2,1))
plot(din$tip)
plot(din$tip)
plot(lun$tip)
plot(lun$tip)
plot(din$tip)
plot(lun$tip)
summary(lun)
subet(lun, tip>4)
subset(lun, tip>4)
summary(tmp)
summary(tmp)
summary(tmp)
tmp = subset(lun, tip>4)#4 이상인 사람들 보기
summary(tmp)
summary(tmp)
summary(tip$fri)
subset(tips$fri)
subset(tips, tips$day =='Fri)
subset(tips, tips$day =='Fri')
subset(tips, tips$day ='Fri')
subset(tips, tips$day == 'Fri')
summary(subset(tips, tips$day == 'Fri')) #금요일 데이터를 보자
table(tmp#size)
table(tmp$ize)
table(tmps$ize)
table(tmp$ize)
table(tmp$ize)
table(tmp$ize)
table(tmp$ize)
table(tmp$ize)
table(tmp$ize)
table(tmp$ize)
subset(lun, tip>=4)#4 이상인 사람들 보기
tmp = subset(lun, tip>4)#많이 오는 사람 중 비흡연자 확인
tmp = subset(lun, tip>=4)#많이 오는 사람 중 비흡연자 확인
table(tmp$ize)
subset(lun, tip>=4)#4 이상인 사람들 보기
tmp = subset(lun, tip>=4)#많이 오는 사람 중 비흡연자 확인
summary(tmp)
subset(tips, tips$day == 'Fri') #금요일 데이터를 보자 - 2명이 많다
table(tmp$ize)
table(tmp$ize)
table(tmp$ize)
table(tmp$size)
colSums(din[c('total_bill', 'tip', 'size')])
colSums(lun[c('total_bill', 'tip', 'size')])
summary(lun)
summary(sex)
summary(tip#sex)
summary(tip$sex)
summary(tips$sex)
table(tips$sex)
table(tips$sex)
summary(tips$sex)
S.F = subset(tips, sex == 'Female')
S.M = subset(tips, sex == 'male')
summary(S.F)
summary(S.M)
S.M = subset(tips, sex == 'Male')
summary(S.M)
plot(S.F$top , min = 'F , sum of Tips')
plot(S.F$tip , min = 'F , sum of Tips')
plot(S.F$tip , main = 'F sum of Tips')
plot(S.F$tip , main = 'F sum of Tips')
par(mfrow=c(2,1))
plot(S.F$tip , main = 'F sum of Tips')
plot(S.M$tip , main = 'M sum of Tips')
S.F
plot(S.F$tip , size = 'F- size')
plot(S.M$tip , size = 'M -size')
plot(S.F$size , main = 'F- size')
plot(S.M$size , main = 'M -size')
tips
plot(tips)
plot(tips[,1])
head(tops[,1])
head(tips[,1])
head(tips[,1], tip[,2])
head(tips[,1], tips[,2])
plit(tips[,1], tips[,2])
plot(tips[,1], tips[,2])
plot(tips[,7],tips[,1]]
plot(tips[,7],tips[,1])
str(tips)
str(tips)
colNum=c(1,2,7)
par(mfrow=c(3,1))
for( i  in colNum){
prot(tips[,1], main=names(tips)[i])
}
par(mfrow=c(3,1))
plott(tips[,1], main=names(tips)[i])
for( i  in colNum){
plott(tips[,1], main=names(tips)[i])
}
for( i  in colNum){
plot(tips[,1], main=names(tips)[i])
}
for( i  in colNum){
plot(tips[,i], main=names(tips)[i])
}
mtcars
str(mtocars)
str(mtcars)
plot(mtcars)
plot(mtcars[,1,3,5,6])
plot(mtcars[1,3,5,6])
plot(mtcars, c[1,3,5,6])
plot(mtcars[c(,1,3,5,6)])
plot(mtcars[c(1,3,5,6)])
plot(mtcars[c(1,3,5,6)])
cor(mtcars[,c(1,3,5,6)]분석
cor(mtcars[c(1,3,5,6)]분석
cor(mtcars[.c(1,3,5,6)]분석
cor(mtcars[.c(1,3,5,6)])분석
cor(mtcars[,c(1,3,5,6)])분석
cor(mtcars[c(1,3,5,6)])분석
cor(mtcars[,c(1,3,5,6)])분석
cor(mtcars[,c(1,3,5,6)])분석
cor(mtcars[,c(1,3,5,6)]) #피어슨 상관계스(-1~1사이값)
#----------------
install.packages("PerformanceAnalytics")
libray(PerformanceAnalytics)
libray("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
libray("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Corraltion(mtcars, histogram=TRUE, pch='')
chart.Correlation(mtcars, histogram=TRUE, pch='')
tmp=tips[,c(1,2,7)]
chart.Correlation(tmp, historgram=TRUE, pch='')
chart.Correlation(mtcars, histogram=TRUE, pch=19)
chart.Correlation(tmp, historgram=TRUE, pch=19)
tt=subset(tips, tip<5)
boxplot(tt$tip)
summary(tt)
summary(tt)
boxplot(tt$tip)
str(tt)
boxplot(tip~day, date=tt)
tmp=subset(tip, day=='Fri')
tmp=subset(tips, day =='Fri')
tmp=subset(tips, day =='Fri')
boxplot(tip~size, data=tmp)
boxplot(tip~sex, data=tmp)
boxplot(tip~smoker, data=tmp)
boxplot(tip~time, data=tmp)
mtcars
boxplot(mtcar$mpg~mtcar$gear)
boxplot(mtcasr$mpg~mtcar$gear)
boxplot(mtcars$mpg~mtcar$gear)
boxplot(mtcars$mpg~mtcars$gear)
par(mfrow=c(2,1))
boxplot(mtcars$mpg~mtcars$gear)
plot(mtcars#mpg~mtcars$gear)
col(mtcars$mpg,mtcars$gear)
par(mfrow=c(2,1))
boxplot(mtcars$mpg~mtcars$gear)
plot(mtcars#mpg~mtcars$gear)
col(mtcars$mpg,mtcars$gear)
plot(mtcars#mpg~mtcars$gear)
plot(mtcars$mpg~mtcars$gear) 
col(mtcars$mpg,mtcars$gear)
par(mfrow=c(2,1))
boxplot(mtcars$mpg~mtcars$gear)
#양의 상관도를 가지고있음/ 
plot(mtcars$mpg~mtcars$gear) 
col(mtcars$mpg,mtcars$gear)
cor(mtcars$mpg,mtcars$gear)
par(mfrow=c(2,1))
boxplot(mtcars$mpg~mtcars$gear)
#양의 상관도를 가지고있음/ 
plot(mtcars$mpg~mtcars$gear) 
cor(mtcars$mpg,mtcars$gear)
boxplot(mtcaplot(mtcars$mpg~mtcars$am) 
plot(mtcars$mpg~mtcars$am)
boxplot(mtcaplot(mtcars$mpg~mtcars$am) 
plot(mtcars$mpg~mtcars$am) 
boxplot(mtcaplot(mtcars$mpg~mtcars$am) 
plot(mtcars$mpg~mtcars$am) 
boxplot(mtcars$mpg~mtcars$am)
plot(mtcars$mpg~mtcars$am) 
boxplot(mtcars)
tmp=scale(mtcars)
summary(tmp)
boxplot(tmp)
q()
dir()
df=read("cust_order_data.csv")  
df=read.csv("cust_order_data.csv")  
df
df=read.csv("cust_order_data.csv")
df=read.csv('./DataSet/cust_order_data.csv',sep='\t',encoding='ANSI')
df=read.csv('cust_order_data.csv',sep='\t',encoding='ANSI')
df=read.csv("cust_order_data.csv")
dat <-read.csv("dat.csv", encoding="UTF-8", stringsAsFactors=FALSE)
dt <-read.csv("cust_order_data.csv", encoding="UTF-8", stringsAsFactors=FALSE)
remove
rm(list=is())
rm(list=is())
rm(list = is())
memory.size()
rm(list=is)
rm(list=is())
dt <-read.csv("cust_order_data.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df=read.csv("cust_order_data.csv",sep='\t',encoding='ANSI')
df
table(df)
nrow(df)
ncol(df)
length(df)
dim(df)
str(df)
head(df,3)
names(df)
slelect(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별)
select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별)
str(df,select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별))
str(df(select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별))
tmp = df(select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별))
str(tmp)
head(tmp)
rm(list=is())
rm(list=is(tmp))
tmp = df(select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별))
tmp = df(select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별))
dt <-read.csv("cust_order_data.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df=read.csv("cust_order_data.csv")
df
tmp = df(select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별))
tmp = df(select(-CUST_SERIAL_NO: 고객번호 , SEX: 고객성별))
tmep = data.frame(table(df[,1])
dt <-read.csv("cust_order_data.csv", encoding="UTF-8", stringsAsFactors=TRUE)
dt <-read.csv("cust_order_data.csv", encoding="UTF-8", stringsAsFactors=TRUE)
tmep = data.frame(table(df[,1])
tmep = data.frame(table(df[,1])
str(df)
help(read.csv) #is.table 때문에 팩터 트루로
tmep = data.frame(table(df[,1])
tmp = data.frame(table(df[,1]))
head(tmp)
summary(tmp#Freq)
summary(tmp$Freq)
summary(tmp$Freq)
summary(tmp$Freq)
boxplot(tmp$freq)
summary(tmp$Freq)
tmp = data.frame(table(df[,1]))
head(tmp)
summary(tmp$Freq)
boxplot(tmp$freq)
boxplot(tmp$freq)
tmp = data.frame(table(df[,1]))
head(tmp)
summary(tmp$Freq)
boxplot(tmp$freq)
boxplot(tmp$freq)
boxplot(df[,16])
summary(tmp$Freq)
table(df[.5]) #유니크나 써머리 가능)
table(df[.5])
tmp = data.frame(table(df[,1]))
head(tmp)
summary(tmp$Freq)
boxplot(tmp$freq)
#1년간의 구매기록 - 연 평균 1.2회 정도 구매한 것으로 보임
table(df[.5]) #유니크나 써머리 가능)
table(df[,5]) #유니크나 써머리 가능)
boxplot(df[,16])
str(df)
tmp<-dfGOODS_NAME
tmp<-df$GOODS_NAME
str(tmp)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
rm(list=is())
dir()
df=read.csv("cust_order_data.csv")
df
dir()
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
df=df[df$SEX !="*",]
df
head(df,10)
sex1 = subset(df,select=c(ORDER_DATE, SEX, QTY))
sex1
install.packages('lubridate')
library(lubridate)
sex2 = cbind(sex1, month=month(sex1$ORDER_DATE)
sex2 = cbind(sex1, month=month(sex1$ORDER_DATE))
sex2 = cbind(sex1, month=month(sex1$ORDER_DATE))
head(sex2, 5)
rm(list=is())
install.packages('reshape2')
library(reshape2)
dcast(sex2, SEX ~ month, value.var="QTY", sum)
changeGender = function(x) {if(x[2] == "M"){return("male")}
changeGender = function(x) {if(x[2] == "M"){return("male")}
changeGender = function(x) {if(x[2] == "M"){return("male")}
changeGender = function(x) {if(x[2] == "M"}
{return("male")}
else{return("female")}
changeGender <- function(x) { if (x[2] == “M”) { return("male") } else 
{ return("female") } }
changeGender <- function(x) { if (x[2] == “M”) { return("male") } else 
{ return("female") } }
changeGender = function(x) {if(x[2] == "M"}
{return("male")} else{return("female")}
changeGender = function(x) {if(x[2] == "M"} {return("male")} else{return("female")}
changeGender <- function(x) { if (x[2] == “M”) { return("male") } else { return("female") } }
changeGender <- function(x) { if (x[2] == “M”) { return("male") } 
   else { return("female") } }
gplot(month, data=sex2, geom= "bar',fill=gender
gplot(month, data=sex2, geom= "bar',fill=gender)
intall.packages(gplot)
intall.packages('gplot')
install.packages('gplot')
gplot
gplot(month, data=sex2, geom= "bar',fill=gender)
gplot(month, data=sex2, geom= "bar",fill=gender)
rm(list=ls())
rm(list=ls())
rm(list=ls())
dir()
dir()
install.packages('arules')
df=read.transactions("train.txt", format="basket", sep=",")
tran=read.transactions("train.txt", format="basket", sep=",") #트렌잭션 개체 생성(변동있는 파일)
install.packages('arules') #텍스트 불러오기 가능
library(arules)
tran=read.transactions("train.txt", format="basket", sep=",") #트렌잭션 개체 생성(변동있는 파일)
tran
str(tran)
class(tran)
tran@iteminfo
tran@itemInfo
tran@dim
tran@Data
tran@data
tran #6개의 트랜잭션과 5개의 항목(상품)생성
rule = apriori(tran, parameter = list(supp=0.3, conf-0.1)) # 16 rule
rule = apriori(tran, parameter = list(supp=0.3, conf=0.1)) # 16 rule
str(rule)
inspect(rule) #규칙보기
install.packages("arulesViz")
library(arulesViz)
plot(ar3, method='graph', control=list(type='items'))
plot(rule, method='graph', control=list(type='items'))
q()
